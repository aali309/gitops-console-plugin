import * as React from 'react';
import { RouteComponentProps } from 'react-router';
import { ApplicationSetKind, ApplicationSetModel } from '../../models/ApplicationSetModel';
import {
  Badge,
  PageSection,
  Title,
  DescriptionList,
  Flex,
  FlexItem,
} from '@patternfly/react-core';
import BaseDetailsSummary, { DetailsDescriptionGroup } from '../shared/BaseDetailsSummary/BaseDetailsSummary';
import { getAppSetGeneratorCount, getAppSetStatus } from '../../utils/gitops';
import { useK8sWatchResource, ResourceLink } from '@openshift-console/dynamic-plugin-sdk';
import { ApplicationKind, ApplicationModel } from '../../models/ApplicationModel';
import { Conditions } from '../../utils/components/Conditions/Conditions';
import HealthStatus from '../../Statuses/HealthStatus';
import './AppSetDetailsTab.scss';

type AppSetDetailsTabProps = RouteComponentProps<{ ns: string; name: string }> & {
  obj?: ApplicationSetKind;
};

const AppSetDetailsTab: React.FC<AppSetDetailsTabProps> = ({ obj }) => {
  const namespace = obj?.metadata?.namespace;
  if (!obj) return null;

  const status = obj.status || {};
  const spec = obj.spec || {};
  const totalGenerators = getAppSetGeneratorCount(obj);
  const appSetStatus = getAppSetStatus(obj);
  
  // Get applications to count generated apps
  const [applications] = useK8sWatchResource<ApplicationKind[]>({
    groupVersionKind: {
      group: ApplicationModel.apiGroup,
      version: ApplicationModel.apiVersion,
      kind: ApplicationModel.kind,
    },
    namespace: namespace || obj.metadata?.namespace,
    isList: true,
  });

  // Count applications owned by this ApplicationSet
  const generatedAppsCount = applications?.filter(app => 
    app.metadata?.ownerReferences?.some(owner => 
      owner.kind === obj.kind && owner.name === obj.metadata?.name
    )
  ).length || 0;

  return (
    <>
      <PageSection>
        <Title headingLevel="h2" className="co-section-heading">
          Argo CD ApplicationSet details
        </Title>
        <Flex
          justifyContent={{ default: 'justifyContentSpaceEvenly' }}
          direction={{ default: 'column', lg: 'row' }}
        >
          <Flex flex={{ default: 'flex_2' }}>
            <FlexItem>
              <BaseDetailsSummary obj={obj} model={ApplicationSetModel} />
            </FlexItem>
          </Flex>
          <Flex flex={{ default: 'flex_2' }} direction={{ default: 'column' }}>
            <FlexItem>
              <DescriptionList className="pf-c-description-list">
          <DetailsDescriptionGroup
            title="Status"
            help="Current health status of the ApplicationSet."
          >
            <HealthStatus status={appSetStatus} />
          </DetailsDescriptionGroup>

          <DetailsDescriptionGroup
            title="Generated Apps"
            help="Number of applications generated by this ApplicationSet."
          >
            <Badge isRead color="blue">{generatedAppsCount} application{generatedAppsCount !== 1 ? 's' : ''}</Badge>
          </DetailsDescriptionGroup>

          <DetailsDescriptionGroup
            title="Generators"
            help="Number of generators configured in this ApplicationSet."
          >
            <Badge isRead color="grey">{totalGenerators} generator{totalGenerators !== 1 ? 's' : ''}</Badge>
          </DetailsDescriptionGroup>

          <DetailsDescriptionGroup
            title="App Project"
            help="Argo CD project that this ApplicationSet belongs to."
          >
            <ResourceLink
              namespace={obj?.metadata?.namespace}
              groupVersionKind={{
                group: 'argoproj.io',
                version: 'v1alpha1',
                kind: 'AppProject',
              }}
              name={spec.template?.spec?.project || 'default'}
            />
          </DetailsDescriptionGroup>

          {spec.template?.spec?.source?.repoURL && (
            <DetailsDescriptionGroup
              title="Repository"
              help="Git repository URL where the ApplicationSet configuration is stored."
            >
              <a href={spec.template.spec.source.repoURL} target="_blank" rel="noopener noreferrer">
                {spec.template.spec.source.repoURL}
              </a>
            </DetailsDescriptionGroup>
          )}
              </DescriptionList>
            </FlexItem>
          </Flex>
        </Flex>
      </PageSection>

      <PageSection>
        <Title headingLevel="h2" className="co-section-heading">
          Conditions
        </Title>
        <Conditions conditions={status.conditions} />
      </PageSection>
    </>
  );
};

export default AppSetDetailsTab;
